const API = (location.origin.replace(/\/$/, '')) + '/api';
async function getJSON(url, opts){ const r=await fetch(url, opts); if(!r.ok) throw new Error(await r.text()); return r.json(); }

async function loadTemplates() {
  const tpls = await getJSON(`${API}/templates`);
  const sel = document.getElementById('template');
  if (sel) { sel.innerHTML = ''; tpls.forEach(t=>{ const o=document.createElement('option'); o.value=t.slug; o.textContent=t.title; sel.appendChild(o); }); }
  const cards=document.getElementById('cards');
  if (cards){ cards.innerHTML=''; tpls.forEach(t=>{ const el=document.createElement('div'); el.className='card'; el.innerHTML=`<div class="kicker">${t.type}</div><h3>${t.title}</h3><p>${t.description||''}</p><div class="chips">${t.variables.map(v=>`<span class="chip">${v}</span>`).join('')}</div>`; cards.appendChild(el); }); }
  const list=document.getElementById('tplList');
  if(list){ list.innerHTML=''; tpls.forEach(t=>{ const row=document.createElement('div'); row.className='card'; row.style.padding='10px'; row.textContent = `${t.title} (${t.slug})`; row.addEventListener('click', ()=>fillEditor(t)); list.appendChild(row); }); }
}
function editorEls(){ return { title:document.getElementById('tplTitle'), slug:document.getElementById('tplSlug'), type:document.getElementById('tplType'), desc:document.getElementById('tplDesc'), vars:document.getElementById('vars'), guides:document.getElementById('guides') }; }
function fillEditor(t){ const e=editorEls(); e.title.value=t.title||''; e.slug.value=t.slug||''; e.type.value=t.type||''; e.desc.value=t.description||''; e.vars.innerHTML=''; (t.variables||[]).forEach(v => addVarChip(v)); e.guides.value=(t.guideline_links||[]).join('\n'); }
function addVarChip(v){ const e=document.getElementById('vars'); const chip=document.createElement('span'); chip.className='chip'; chip.draggable=true; chip.textContent=v; chip.addEventListener('dragstart', ev=>ev.dataTransfer.setData('text/plain', v)); e.appendChild(chip); }
async function saveTemplate(){ const e=editorEls(); const payload={ title:e.title.value.trim(), slug:e.slug.value.trim(), type:e.type.value.trim()||'soap', description:e.desc.value.trim(), variables:[...e.vars.querySelectorAll('.chip')].map(c=>c.textContent), guideline_links:e.guides.value.split('\n').map(x=>x.trim()).filter(Boolean) }; await getJSON(`${API}/templates/save`, {method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(payload)}); await loadTemplates(); alert('Template saved.'); }
let mediaRecorder, chunks=[];
async function toggleMic(btn){ if(!mediaRecorder || mediaRecorder.state==='inactive'){ const stream=await navigator.mediaDevices.getUserMedia({audio:true}); mediaRecorder=new MediaRecorder(stream,{mimeType:'audio/webm'}); chunks=[]; mediaRecorder.ondataavailable=e=>chunks.push(e.data); mediaRecorder.onstop=async ()=>{ const blob=new Blob(chunks,{type:'audio/webm'}); const fd=new FormData(); fd.append('file', blob, 'note.webm'); const r=await fetch(`${API}/transcribe`,{method:'POST',body:fd}); const j=await r.json(); document.getElementById('transcript').value += (document.getElementById('transcript').value?'\n':'') + (j.text||''); btn.textContent='🎙️ Start Recording'; }; mediaRecorder.start(); btn.textContent='⏹ Stop'; } else { mediaRecorder.stop(); } }
async function extractNote(){ const transcript=document.getElementById('transcript').value; const template_slug=document.getElementById('template').value; const patient_name=document.getElementById('patientName').value; const body={transcript, template_slug, patient_name, conditions:guessConditions(transcript)}; const j=await getJSON(`${API}/extract`, {method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}); document.getElementById('subj').value=j.subjective||''; document.getElementById('obj').value=j.objective||''; document.getElementById('assess').value=j.assessment||''; document.getElementById('plan').value=j.plan||''; renderVitalsChips(j.vitals || []); }
function guessConditions(text){ const lc=text.toLowerCase(); const out=[]; if(lc.includes('copd')||lc.includes('emphysema')) out.push('copd'); if(lc.includes('diabetes')||lc.includes('a1c')) out.push('dm2'); if(lc.includes('heart failure')||lc.includes('chf')) out.push('chf'); if(lc.includes('asthma')) out.push('asthma'); return out; }
function renderVitalsChips(vitals){ const ct=document.getElementById('vitals'); if(!ct) return; ct.innerHTML=''; vitals.forEach(v=>{ const s=document.createElement('span'); s.className='chip'; s.textContent=`${v.name}: ${v.value}`; ct.appendChild(s); }); }
async function saveNote(){ const newid = (await getJSON(`${API}/notes/new`)).id; const payload={ id:newid, patient_name:document.getElementById('patientName').value, template_slug:document.getElementById('template').value, transcript:document.getElementById('transcript').value, subjective:document.getElementById('subj').value, objective:document.getElementById('obj').value, assessment:document.getElementById('assess').value, plan:document.getElementById('plan').value, vitals:[...document.getElementById('vitals').querySelectorAll('.chip')].map(x=>{const [name,val]=x.textContent.split(':'); return {name:name.trim(), value:(val||'').trim()}}) }; await getJSON(`${API}/notes/save`, {method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}); alert('Saved.'); }
async function exportNote(fmt){ const payload={ format:fmt, patient_id:'TEMP123', note:{ id:'tmp', patient_name:document.getElementById('patientName').value, template_slug:document.getElementById('template').value, transcript:document.getElementById('transcript').value, subjective:document.getElementById('subj').value, objective:document.getElementById('obj').value, assessment:document.getElementById('assess').value, plan:document.getElementById('plan').value, vitals:[...document.getElementById('vitals').querySelectorAll('.chip')].map(x=>{const [name,val]=x.textContent.split(':'); return {name:name.trim(), value:(val||'').trim()}}) } }; const r=await fetch(`${API}/export`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}); const blob=await r.blob(); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download = fmt==='fhir' ? 'note.fhir.json' : 'note.ccda.xml'; a.click(); URL.revokeObjectURL(a.href); }
async function loadNotes(){ const ct=document.getElementById('notes'); if(!ct) return; const notes=await getJSON(`${API}/notes`); ct.innerHTML = notes.slice().reverse().map(n=>`<div class="card" style="margin-bottom:10px"><div class="kicker">${n.template_slug}</div><b>${n.patient_name||'Unnamed'}</b><div class="chips" style="margin-top:6px">${(n.vitals||[]).map(v=>`<span class="chip">${v.name}:${v.value}</span>`).join('')}</div></div>`).join(''); }
document.addEventListener('DOMContentLoaded', ()=>{ if (document.getElementById('template')) loadTemplates(); if (document.getElementById('notes')) loadNotes(); const micBtn=document.getElementById('micBtn'); if(micBtn) micBtn.addEventListener('click',()=>toggleMic(micBtn)); const extractBtn=document.getElementById('extractBtn'); if(extractBtn) extractBtn.addEventListener('click', extractNote); const saveBtn=document.getElementById('saveBtn'); if(saveBtn) saveBtn.addEventListener('click', saveNote); const fhir=document.getElementById('exportFHIR'); if(fhir) fhir.addEventListener('click',()=>exportNote('fhir')); const ccda=document.getElementById('exportCCDA'); if(ccda) ccda.addEventListener('click',()=>exportNote('ccda')); const addVar=document.getElementById('addVar'); if(addVar) addVar.addEventListener('click', ()=>{ const v=document.getElementById('varInput').value.trim(); if(!v) return; addVarChip(v); document.getElementById('varInput').value=''; }); const saveTpl=document.getElementById('saveTpl'); if(saveTpl) saveTpl.addEventListener('click', saveTemplate); });
